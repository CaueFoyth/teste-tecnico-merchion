version: '3.8'

services:
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev
    container_name: desafio-backend-app-dev
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ./backend:/var/www
      - ./.env.local:/var/www/.env
    command: >
      sh -c "
        echo 'Aguardando o banco de dados...' &&
        while ! nc -z db 3306; do
          sleep 1;
        done &&
        echo 'Banco de dados pronto.' &&

        if [ ! -f .env ]; then
          echo 'Copiando .env.example para .env...'
          cp .env.example .env;
        fi &&

        composer install --no-interaction --no-progress --prefer-dist &&

        if [ -z \"$(grep ^APP_KEY= .env | cut -d '=' -f2-)\" ]; then
          echo 'Gerando APP_KEY...'
          php artisan key:generate;
        fi &&

        echo 'Ajustando permissões...' &&
        chown -R www-data:www-data /var/www/storage /var/www/bootstrap/cache &&
        chmod -R 775 /var/www/storage /var/www/bootstrap/cache &&

        echo 'Rodando as migrations...' &&
        php artisan migrate --force &&

        echo 'Rodando os testes...' &&
        php artisan test &&

        echo 'Testes concluídos com sucesso. Iniciando PHP-FPM...' &&
        php-fpm
      "
    depends_on:
      - db
    networks:
      - desafio-net-dev

  nginx:
    image: nginx:alpine
    container_name: desafio-backend-nginx-dev
    restart: unless-stopped
    ports:
      - "5252:80"
    volumes:
      - ./backend:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - desafio-net-dev

  db:
    image: mysql:8.0
    container_name: desafio-backend-db-dev
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
    volumes:
      - db_data_dev:/var/lib/mysql
    ports:
      - "33061:3306"
    networks:
      - desafio-net-dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
    container_name: desafio-frontend-dev
    restart: unless-stopped
    ports:
      - "3030:3030"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    # env_file:
    #   - .env.local
    networks:
      - desafio-net-dev

networks:
  desafio-net-dev:
    driver: bridge

volumes:
  db_data_dev:
